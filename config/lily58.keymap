/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "include/mykeys.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        zx-undo {
            bindings = <&kp LC(Z)>;
            key-positions = <37 38>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <37 39>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <38 39>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <39 40>;
        };

        select-all {
            bindings = <&kp LC(A)>;
            key-positions = <37 40>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        parent_tapdance: parent_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "PARENT_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBRKT_NUM9>, <&kp RBRKT_NUM0>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        space_comma_td: space_comma_td {
            compatible = "zmk,behavior-tap-dance";
            label = "SPACE_COMMA_TD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SPACE>, <&kp COMMA>;
        };

        bracket_td: bracket_td {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACKET_TD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RA(LBRKT_LBRC)>, <&kp RA(RBRKT_RBRC)>;
        };

        braces_td: braces_td {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACES_TD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LS(RA(LBRKT_LBRC))>, <&kp LS(RA(RBRKT_RBRC))>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC         &kp EXC_NUM1  &kp A_NUM2       &kp HSH_NUM3_N     &kp SEMIC_NUM4_DLR  &kp PER_NUM5                                                      &kp COLON_NUM6_CRT  &kp QUMARK_NUM7_AMPERSND  &kp STR_NUM8        &kp LBRKT_NUM9   &kp RBRKT_NUM0   &tog 1
&kp TAB         &kp Q         &kp W            &kp E              &kp R               &kp T                                                             &kp Y               &kp U                     &kp I               &kp O            &kp P            &kp RBRKT_RBRC
&kp LEFT_SHIFT  &kp A         &hrm LEFT_ALT S  &hrm LEFT_SHIFT D  &hrm LCTRL F        &kp G                                                             &kp H               &hrm RCTRL J              &hrm RIGHT_SHIFT K  &hrm LEFT_ALT L  &hrm RGUI RU_ZH  &kp RU_E
&kp LCTRL       &kp Z         &kp X            &kp C              &kp V               &kp B         &kp APSTRPH_TLD_GRV    &kp DBLQT_SLSH_BCKSLSH_PIPE  &kp N               &kp M                     &kp DOT             &kp COMMA        &kp LBRKT_LBRC   &kp RU_U
                                               &kp LALT           &mo 3               &mo 2         &kp SPACE              &kp RET                      &mo 4               &kp BACKSPACE             &kp DELETE
            >;
        };

        colemak {
            bindings = <
&kp ESC         &kp EXC_NUM1  &kp A_NUM2       &kp HSH_NUM3_N     &kp SEMIC_NUM4_DLR  &kp PER_NUM5                                                      &kp COLON_NUM6_CRT  &kp QUMARK_NUM7_AMPERSND  &kp STR_NUM8       &kp LBRKT_NUM9   &kp RBRKT_NUM0   &tog 1
&kp TAB         &kp Q         &kp W            &kp F              &kp P               &kp B                                                             &kp J               &kp L                     &kp U              &kp Y            &kp SEMI         &kp RBRKT_RBRC
&kp LEFT_SHIFT  &kp A         &hrm LEFT_ALT R  &hrm LEFT_SHIFT S  &hrm LCTRL T        &kp G                                                             &kp M               &hrm LCTRL N              &hrm LEFT_SHIFT E  &hrm LEFT_ALT I  &hrm LEFT_GUI O  &kp RU_E
&kp LCTRL       &kp Z         &kp X            &kp C              &kp D               &kp V         &kp APSTRPH_TLD_GRV    &kp DBLQT_SLSH_BCKSLSH_PIPE  &kp K               &kp H                     &kp COMMA          &kp DOT          &kp LBRKT_LBRC   &kp RU_U
                                               &kp LALT           &mo 3               &mo 2         &kp SPACE              &kp RET                      &mo 4               &kp BACKSPACE             &kp DELETE
            >;
        };

        Symbol {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans  &trans                   &trans                              &trans                                      &trans                                           &trans                                &trans                               &trans                  &trans          &trans                  &trans        &trans
&trans  &kp RA(APSTRPH_TLD_GRV)  &kp QUMARK_NUM7_AMPERSND            &kp EXC_NUM1                                &kp COLON_NUM6_CRT                               &kp SEMIC_NUM4_DLR                    &kp RA(QUMARK_NUM7_AMPERSND)         &kp A_NUM2              &kp LESS_THAN   &kp GREATER_THAN        &trans        &trans
&trans  &trans                   &hrm RA(RBRKT_RBRC) RA(LBRKT_LBRC)  &hrm LS(RA(RBRKT_RBRC)) RA(LS(LBRKT_LBRC))  &hrm LS(RIGHT_PARENTHESIS) LS(LEFT_PARENTHESIS)  &kp EQUAL                             &kp RA(LS(DBLQT_SLSH_BCKSLSH_PIPE))  &kp LEFT_CONTROL        &kp LEFT_SHIFT  &kp LEFT_ALT            &kp LEFT_GUI  &trans
&trans  &trans                   &kp RA(DBLQT_SLSH_BCKSLSH_PIPE)     &kp MINUS                                   &kp LS(DBLQT_SLSH_BCKSLSH_PIPE)                  &kp UNDER           &trans    &trans  &kp LS(APSTRPH_TLD_GRV)              &kp RA(SEMIC_NUM4_DLR)  &kp PER_NUM5    &kp RA(COLON_NUM6_CRT)  &trans        &trans
                                                                     &trans                                      &trans                                           &trans              &trans    &trans  &trans                               &trans                  &trans
            >;
        };

        Nav {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans  &trans         &kp C_VOL_DN    &kp C_MUTE      &kp C_VOLUME_UP  &trans                       &trans      &trans      &trans            &trans      &trans    &trans
&trans  &kp PG_UP      &kp HOME        &kp UP_ARROW    &kp END          &trans                       &kp C_STOP  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &trans    &kp SCROLLLOCK
&trans  &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans                       &trans      &kp LCTRL   &kp LEFT_SHIFT    &kp LALT    &kp LGUI  &trans
&trans  &kp LC(Z)      &kp LC(X)       &kp LC(C)       &kp LC(V)        &kp LC(Z)  &trans    &trans  &kp LC(Z)   &kp LC(X)   &kp LC(C)         &kp LC(V)   &trans    &trans
                                       &trans          &trans           &trans     &trans    &trans  &trans      &trans      &trans
            >;
        };

        Number-func {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans  &trans                     &trans              &trans                         &trans                        &trans                            &trans                           &trans
&trans      &trans        &kp F7        &kp F8  &kp F9  &kp F10                    &kp EQUAL           &kp LS(QUMARK_NUM7_AMPERSND)   &kp LS(STR_NUM8)              &kp LS(LBRKT_NUM9)                &kp STR_NUM8                     &trans
&trans      &trans        &kp F4        &kp F5  &kp F6  &kp F11                    &kp PLUS            &hrm LCTRL LS(SEMIC_NUM4_DLR)  &hrm LEFT_SHIFT LS(PER_NUM5)  &hrm LEFT_ALT LS(COLON_NUM6_CRT)  &hrm LEFT_GUI MINUS              &trans
&trans      &trans        &kp F1        &kp F2  &kp F3  &kp F12  &trans    &trans  &kp LS(RBRKT_NUM0)  &kp LS(EXC_NUM1)               &kp LS(A_NUM2)                &kp LS(HSH_NUM3_N)                &kp RA(DBLQT_SLSH_BCKSLSH_PIPE)  &trans
                                        &trans  &trans  &trans   &trans    &trans  &trans              &trans                         &trans
            >;
        };
    };
};
