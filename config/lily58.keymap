/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "include/mykeys.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        caps_word2: caps_word2 {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WORD2";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        comma_excl: comma_excl {
            compatible = "zmk,behavior-mod-morph";
            label = ", !";
            bindings = <&kp KP_COMMA>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_questionM: dot_questionM {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_QUESTIONM";
            bindings = <&kp KP_DOT>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC         &kp EXC_NUM1     &kp A_NUM2       &kp HSH_NUM3_N     &kp SEMIC_NUM4_DLR  &kp PER_NUM5                                         &kp COLON_NUM6_CRT  &kp QUMARK_NUM7_AMPERSND  &kp STR_NUM8        &kp LBRKT_NUM9   &kp RBRKT_NUM0   &kp DBLQT_SLSH_BCKSLSH_PIPE
&kp TAB         &kp Q            &kp W            &kp E              &kp R               &kp T                                                &kp Y               &kp U                     &kp I               &kp O            &kp P            &kp LBRKT_LBRC
&kp LEFT_SHIFT  &hrm LEFT_GUI A  &hrm LEFT_ALT S  &hrm LEFT_SHIFT D  &hrm LCTRL F        &kp G                                                &kp H               &hrm RCTRL J              &hrm RIGHT_SHIFT K  &hrm LEFT_ALT L  &hrm RGUI RU_ZH  &kp RU_E
&kp LCTRL       &kp Z            &kp X            &kp C              &kp V               &kp B         &kp APSTRPH_TLD_GRV    &kp RBRKT_RBRC  &kp N               &kp M                     &kp DOT             &kp COMMA        &kp RU_U         &kp RSHFT
                                                  &kp LALT           &kp LGUI            &mo 1         &kp SPACE              &kp RET         &mo 2               &kp BSPC                  &kp DELETE
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans                   &bt BT_SEL 0            &bt BT_SEL 1                     &bt BT_SEL 2      &bt BT_SEL 3                     &bt BT_SEL 4                      &trans                               &trans                  &trans                  &trans                  &trans                    &bt BT_CLR
&trans                   &kp APSTRPH_TLD_GRV     &kp LESS_THAN                    &kp GREATER_THAN  &kp DBLQT_SLSH_BCKSLSH_PIPE      &kp DOT                           &kp RA(QUMARK_NUM7_AMPERSND)         &kp SEMIC_NUM4_DLR      &kp RA(LBRKT_LBRC)      &kp RA(RBRKT_RBRC)      &kp PER_NUM5              &trans
&kp RA(APSTRPH_TLD_GRV)  &kp EXC_NUM1            &kp MINUS                        &kp PLUS          &kp EQUAL                        &kp HSH_NUM3_N                    &kp RA(LS(DBLQT_SLSH_BCKSLSH_PIPE))  &kp COLON_NUM6_CRT      &kp LBRKT_NUM9          &kp RBRKT_NUM0          &kp QUMARK_NUM7_AMPERSND  &trans
&trans                   &kp RA(COLON_NUM6_CRT)  &kp LS(DBLQT_SLSH_BCKSLSH_PIPE)  &kp STR_NUM8      &kp RA(DBLQT_SLSH_BCKSLSH_PIPE)  &trans          &trans    &trans  &kp LS(APSTRPH_TLD_GRV)              &kp RA(SEMIC_NUM4_DLR)  &kp LS(RA(LBRKT_LBRC))  &kp LS(RA(RBRKT_RBRC))  &kp A_NUM2                &trans
                                                                                  &trans            &trans                           &trans          &trans    &trans  &trans                               &trans                  &trans
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4            &kp F5          &kp F6                    &kp F7          &kp F8          &kp F9           &kp F10          &kp F11  &kp F12
&kp K_MUTE  &trans        &trans        &trans            &trans          &trans                    &kp END         &kp PAGE_DOWN   &kp PG_UP        &kp HOME         &trans   &kp SCROLLLOCK
&trans      &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans                    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW     &kp RIGHT_ARROW  &trans   &trans
&trans      &trans        &trans        &trans            &trans          &trans  &trans    &trans  &trans          &trans          &kp PAUSE_BREAK  &trans           &trans   &trans
                                        &trans            &trans          &trans  &trans    &trans  &trans          &trans          &trans
            >;
        };
    };
};
